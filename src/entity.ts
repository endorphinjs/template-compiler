import CompileState from './compile-state';
import { RuntimeSymbols } from './symbols';
import { Chunk } from './utils';

export type ChunkBuilder = (ctx: ChunkBuilderContext) => Chunk;

type ChunkBuilderGetter = () => string;
export interface ChunkBuilderContext {
    /** A variable reference to current entity */
    entity: ChunkBuilderGetter;

    /** A variable reference to parent injector */
    injector: ChunkBuilderGetter;

    /** A variable reference to current scope */
    scope: ChunkBuilderGetter;
};

/**
 * Entity is an object generated by runtime. It could be a DOM element, block,
 * iterator etc. Every object must be created and optionally updated and destroyed.
 */
export default class Entity {
    constructor(public name: string, public create?: ChunkBuilder, public update?: ChunkBuilder, public destroy?: ChunkBuilder) {

    }
}

/**
 * Creates basic chunk builder that uses Endorphin runtime symbols
 * @param state
 * @param symbol
 */
export function symbolBuilder(state: CompileState, symbol: RuntimeSymbols): ChunkBuilder {
    return ctx => `${state.runtime(symbol)}(${ctx.entity()});`;
}
